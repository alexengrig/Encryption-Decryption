type: edu
custom_name: stage6
files:
- name: test/EncryptDecryptTest.java
  visible: false
  text: |
    import encryptdecrypt.Main;
    import org.hyperskill.hstest.v6.common.FileUtils;
    import org.hyperskill.hstest.v6.stage.BaseStageTest;
    import org.hyperskill.hstest.v6.testcase.CheckResult;
    import org.hyperskill.hstest.v6.testcase.TestCase;

    import java.util.List;

    public class EncryptDecryptTest extends BaseStageTest<String> {
        public EncryptDecryptTest() {
            super(Main.class);
        }

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .addArguments(
                        "-alg", "unicode",
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "in.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("\\jqhtrj%yt%m~ujwxpnqq&")
                    .addFile("in.txt", "Welcome to hyperskill!"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "0",
                        "-mode", "enc",
                        "-alg", "unicode",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hello")
                    .addFile("input.txt", "Hello"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "1",
                        "-in", "i.txt",
                        "-alg", "unicode",
                        "-out", "output.txt",
                        "-mode", "enc"
                    )
                    .setAttach("123456789")
                    .addFile("i.txt", "012345678"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-in", "input.txt",
                        "-out", "output.txt",
                        "-alg", "unicode",
                        "-key", "5"
                    )
                    .setAttach("Welcome to hyperskill!")
                    .addFile("input.txt", "\\jqhtrj%yt%m~ujwxpnqq&"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-alg", "unicode",
                        "-key", "0",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hi")
                    .addFile("input.txt", "Hi"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "1",
                        "-in", "input.txt",
                        "-alg", "unicode",
                        "-out", "output.txt"
                    )
                    .setAttach("111122223333")
                    .addFile("input.txt", "222233334444"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("bjqhtrj yt mdujwxpnqq")
                    .addFile("input.txt", "welcome to hyperskill"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("treasure")
                    .addFile("input.txt", "dbokcebo"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "12",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("cphpchdjcijdjibhdjebhjucspucmdmudbnuccup")
                    .addFile("input.txt", "qdvdqvrxqwxrxwpvrxspvxiqgdiqarairpbiqqid"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("y")
                    .addFile("input.txt", "i"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("i")
                    .addFile("input.txt", "y")
            );
        }

        @Override
        public CheckResult check(String reply, String clue) {
            String output = FileUtils.readFile("output.txt");
            return new CheckResult(output.trim().equals(clue.trim()));
        }

    }
  learner_created: false
- name: src/encryptdecrypt/Main.java
  visible: true
  text: |
    package encryptdecrypt;

    import java.io.File;
    import java.io.FileNotFoundException;
    import java.io.FileWriter;
    import java.io.IOException;
    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {
            assert args.length % 2 == 0;
            String mode = "enc";
            int key = 0;
            String data = null;
            String inFilename = null;
            String outFilename = null;
            for (int i = 0; i < args.length; i++) {
                String arg = args[i];
                String value = args[++i];
                switch (arg) {
                    case "-mode":
                        mode = value;
                        break;
                    case "-key":
                        key = Integer.parseInt(value);
                        break;
                    case "-data":
                        data = value;
                        break;
                    case "-in":
                        inFilename = value;
                        break;
                    case "-out":
                        outFilename = value;
                        break;
                    default:
                        System.out.println("Unknown a argument: " + arg);
                        break;
                }
            }
            if (data == null && inFilename == null) {
                data = "";
            } else if (data == null) {
                data = readData(inFilename);
            }
            String result;
            if ("dec".equals(mode)) {
                result = decrypt(data, key);
            } else {
                result = encrypt(data, key);
            }
            if (outFilename == null) {
                System.out.println(result);
            } else {
                writeResult(outFilename, result);
            }
        }

        private static String readData(String filename) {
            try (Scanner scanner = new Scanner(new File(filename))) {
                String data = "";
                while (scanner.hasNextLine()) {
                    //noinspection StringConcatenationInLoop
                    data += scanner.nextLine();
                }
                return data;
            } catch (FileNotFoundException e) {
                return "";
            }
        }

        private static void writeResult(String filename, String result) {
            try (FileWriter writer = new FileWriter(filename)) {
                writer.write(result);
                writer.flush();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        @SuppressWarnings("StringConcatenationInLoop")
        private static String encrypt(String message, int key) {
            String cyphertext = "";
            for (char ch : message.toCharArray()) {
                cyphertext += (char) (ch + key);
            }
            return cyphertext;
        }

        @SuppressWarnings("StringConcatenationInLoop")
        private static String decrypt(String cyphertext, int key) {
            String message = "";
            for (char ch : cyphertext.toCharArray()) {
                message += (char) (ch - key);
            }
            return message;
        }
    }
  learner_created: false
- name: output.txt
  visible: true
  text: 111122223333
  learner_created: false
feedback_link: https://hyperskill.org/projects/46/stages/250/implement
status: Solved
record: -1
